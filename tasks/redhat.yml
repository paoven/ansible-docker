---

- name: RedHat | Install package pinning utility
  yum:
    name:  yum-versionlock
    state: present

- name: RedHat | Install epel repo
  yum:
    name: epel-release

- name: RedHat | Install Docker's dependencies
  yum:
    name: "{{ docker__yum_package_dependencies + docker__yum_pip_dependencies }}"


- name: RedHat | install pip and force upgrade
  pip:
    name: pip
    executable: pip3
    state: latest

- name: RedHat | Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip3

- name: RedHat | Add Docker's public GPG key to the YUM keyring
  rpm_key:
    state: present
    key: "{{ docker__yum_key_url }}"
    fingerprint: " {{ docker__yum_key_fingerprint }} "

- name: RedHat | Add Docker repo
  get_url:
    url: "{{ docker__yum_repository }}"
    dest: /etc/yum.repos.d/docker.repo

- name: RedHat | Disable pinned Docker version
  command: yum versionlock delete docker-{{ docker__edition }}
  when: not docker__version | d()
  register: versionlock_result
  failed_when: versionlock_result.rc != 0 
  changed_when: >
    versionlock_result.rc == 0 and ("versionlock deleted: 1" in versionlock_result.stderr)
    
- name: RedHat | Enable pinned Docker version
  command: yum versionlock add docker-{{ docker__edition }}-{{ docker__yum_version }}
  when: docker__yum_version | d()
  register: versionlock_result
  failed_when: versionlock_result.rc != 0 
  changed_when: >
    versionlock_result.rc == 0 and ("versionlock added: 1" in versionlock_result.stderr)    

- name: RedHat | Enable pinned Docker cli version
  command: yum versionlock add docker-{{ docker__edition }}-cli-{{ docker__yum_version }}
  when: docker__yum_version | d()
  register: versionlock_result
  failed_when: versionlock_result.rc != 0 
  changed_when: >
    versionlock_result.rc == 0 and ("versionlock added: 1" in versionlock_result.stderr)    

- name: RedHat | Install Docker
  yum:
    name: "docker-{{ docker__edition }}"
    state: "{{ docker__state }}"
    

- name: RedHat | Install Python packages
  pip:
    name: >
      {{ item.name }}{% if item.version | d() %}=={{ item.version }}{% endif %}
    virtualenv: "{{ docker__pip_virtualenv }}"
    state: "{{ item.state | d('present') }}"
  loop: "{{ docker__default_pip_packages + docker__pip_packages }}"
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin/"
  when: item.name | d()  

